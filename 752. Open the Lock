class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        set<string> deadset(deadends.begin(),deadends.end());
        if(deadset.count("0000")) return -1;
        queue<string> q({"0000"});
        for(int steps=0;!q.empty();steps++){
            for(int i=q.size();i>0;i--){
                auto cur=q.front();
                q.pop();
                if(cur==target) return steps;
                for(auto nei:neighbors(cur)){
                    if(deadset.count(nei)) continue;
                    deadset.insert(nei);//标记
                    q.push(nei);
                }
            }
        }
        return -1;
    }
    vector<string> neighbors(string & code){
        vector<string> res;
        for(int i=0;i<4;i++){
            for(int dif=-1;dif<=1;dif+=2){
                string nei=code;
                nei[i]=(nei[i]-'0'+dif+10)%10+'0';
                res.push_back(nei);
            }
        }
        return res;
    }
};

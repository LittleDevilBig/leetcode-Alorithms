class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& num) {
        vector<vector<int>> ans;
        std::sort(num.begin(),num.end());
        for(int i=0;i<num.size();i++){
            int target=-num[i];
            int front =i+1;
            int back=num.size()-1;
            while(front<back){
                int sum=num[front]+num[back];
                if(sum<target) front++;
                else if(sum>target) back--;
                else{
                    vector<int> a(3,0);
                    a[0]=num[i];
                    a[1]=num[front];
                    a[2]=num[back];
                    ans.push_back(a);
                    while(front<back&&num[front]==a[1]) front++;
                    while(front<back&&num[back]==a[2]) back--;
                }
            }
            while(i+1<num.size()&&num[i+1]==num[i]) i++;
        }return ans;
    }
};
A better approach is that, to jump over the number which has been scanned, no matter it is part of some solution or not.

If the three numbers formed a solution, we can safely ignore all the duplicates of them.

We can do this to all the three numbers such that we can remove the duplicates.

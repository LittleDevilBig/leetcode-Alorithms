class Twitter {
    map<int,set<int>> fo;
    map<int,vector<pair<int,int>>> t;
    long long time;
public:
    Twitter() {
        time=0;
    }
    
    void postTweet(int userId, int tweetId) {
        t[userId].push_back({time++,tweetId});
    }
    
    vector<int> getNewsFeed(int userId) {
        priority_queue<pair<int,int>> maxheap;
        for(auto it=t[userId].begin();it!=t[userId].end();it++)
            maxheap.push(*it);
        for(auto it1=fo[userId].begin();it1!=fo[userId].end();it1++){
            int user=*it1;
            for(auto it2=t[user].begin();it2!=t[user].end();it2++)
                maxheap.push(*it2);
        }
        vector<int> ans;
        while(maxheap.size()>0){
            ans.push_back(maxheap.top().second);
            if(ans.size()==10) break;
            maxheap.pop();
        }
        return ans;
    }
    
    void follow(int followerId, int followeeId) {
        if(followerId!=followeeId)
            fo[followerId].insert(followeeId);
    }
    
    void unfollow(int followerId, int followeeId) {
        fo[followerId].erase(followeeId);
    }
};

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter* obj = new Twitter();
 * obj->postTweet(userId,tweetId);
 * vector<int> param_2 = obj->getNewsFeed(userId);
 * obj->follow(followerId,followeeId);
 * obj->unfollow(followerId,followeeId);
 */

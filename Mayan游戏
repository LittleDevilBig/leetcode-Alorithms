#include<iostream>
#include<string.h>
#include<stdlib.h>
using namespace std;
#define N 10
int map[N][N], ans[N][N], last[N][N][N], n;
bool del[N][N];
void copy(int x) {
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 7; j++)
			last[x][i][j] = map[i][j];
	}
}
void update() {
	for (int i = 0; i < 5; i++) {
		int x = 0;
		for (int j = 0; j < 7; j++) {
			if (!map[i][j]) x++;
			else{
				map[i][j - x] = map[i][j];
				if(x!=0) map[i][j] = 0;
			}
		}
	}
}
bool remove() {
	int flag = 0;
	for(int i = 0; i < 5; i++)
		for (int j = 0; j < 7; j++) {
			if (i - 1 >= 0 && i + 1 < 5 && map[i][j] == map[i - 1][j] && map[i][j] == map[i + 1][j] && map[i][j]) {
				del[i - 1][j] = 1;
				del[i + 1][j] = 1;
				del[i][j] = 1;
				flag = 1;
			}
			if (j - 1 >= 0 && j + 1 < 7 && map[i][j] == map[i][j - 1] && map[i][j] == map[i][j + 1] && map[i][j]) {
				del[i][j - 1] = 1;
				del[i][j + 1] = 1;
				del[i][j] = 1;
				flag = 1;
			}
		}
	if (!flag) return 0;
	for(int i = 0; i < 5; i++)
		for (int j = 0; j < 7; j++)
			if (del[i][j]) {
				del[i][j] = 0;
				map[i][j] = 0;
			}
	return 1;
}
void move(int i, int j, int x) {
	int tmp = map[i][j];
	map[i][j] = map[i + x][j];
	map[i + x][j] = tmp;
	update();
	while (remove()) update();
}
bool check() {
	for (int i = 0; i < 5; i++) {
		if (map[i][0]) return 0;
	}
	return 1;
}
void dfs(int x) {
	if (check()) {
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= 3; j++) {
				cout << ans[i][j] << " ";
			}
			cout << endl;
		}
		exit(0);
	}
	if (x == n+1) return;
	copy(x);
	for(int i = 0; i < 5; i++)
		for (int j = 0; j < 7; j++) {
			if (map[i][j]) {
				if (i + 1 < 5 && map[i][j] != map[i + 1][j]) {
					move(i, j, 1);
					ans[x][1] = i ; ans[x][2] = j ; ans[x][3] = 1;
					dfs(x + 1);
					for (int i = 0; i < 5; i++)
						for (int j = 0; j < 7; j++)
							map[i][j] = last[x][i][j];
					ans[x][1] = -1; ans[x][2] = -1; ans[x][3] = -1;
				}
				if (i - 1 > -1 && map[i - 1][j] == 0) {
					move(i, j, -1);
					ans[x][1] = i; ans[x][2] = j; ans[x][3] = -1;
					dfs(x + 1);
					for (int i = 0; i < 5; i++)
						for (int j = 0; j < 7; j++)
							map[i][j] = last[x][i][j];
					ans[x][1] = -1; ans[x][2] = -1; ans[x][3] = -1;
				}
			}
		}
}
int main() {
	cin >> n;
	memset(map, 0, sizeof(map));
	for (int i = 0; i < 5; i++) {
		int x, j=0;
		while (cin >> x) {
			if (x == 0) break;
			map[i][j] = x;
			j++;
		}
	}
	memset(ans, -1, sizeof(ans));
	memset(last, 0, sizeof(last));
	dfs(1);
	cout << -1 << endl;
}

class LRUCache {
    struct Node{
        int key;
        int val;
        Node *next;
        Node *pre;
        Node(){};
        Node(int k,int v):key(k),val(v),pre(NULL),next(NULL){}
    };

    int size;
    Node * head,*tail;
    map<int, Node*> cacheMap;
public:
    LRUCache(int capacity) {
        size=capacity;
        head=NULL;
        tail=NULL;
       
    }
    void remove(Node * node){
        if(node->pre!=NULL)
            node->pre->next=node->next;
        else head=node->next;
        if(node->next!=NULL)
            node->next->pre=node->pre;
        else tail=node->pre;
    }
    void setHead(Node *node){
        node->next=head;
        node->pre=NULL;
        if(head!=NULL)
            head->pre=node;
        head=node;
        if(tail==NULL)
            tail=head;
    }
    int get(int key) {
        map<int,Node*>::iterator it=cacheMap.find(key);
        if(it!=cacheMap.end()){
            Node *node=it->second;
            remove(node);
            setHead(node);
            return node->val;
        }
        else return -1;
    }
    
    void put(int key, int value) {
        map<int,Node*>::iterator it=cacheMap.find(key);
        if(it!=cacheMap.end()){
            Node *node=it->second;
            node->val=value;
            remove(node);
            setHead(node);
        }
        else{
            Node *newnode=new Node(key,value);
            if(cacheMap.size()>=size){
                map<int,Node*>::iterator it=cacheMap.find(tail->key);
                remove(tail);
                cacheMap.erase(it);
            }
            setHead(newnode);
            cacheMap[key]=newnode;
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
